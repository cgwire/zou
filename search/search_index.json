{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Kitsu API (Zou) documentation The Kitsu API allows you to store and manage the data of your animation/VFX production. Through it, you can link all the tools of your pipeline and make sure they are all synchronized. To integrate it into your tools, you can rely on the dedicated Python client named Gazu . Who is it for? The Kitsu API is made for Technical Directors, ITs, and Software Engineers from animation and VFX studios. With this API, they can enhance the tools they provide to the studio departments. On top of the API, you can deploy the Kitsu frontend, which brings you the full bundle of the collaboration platform developed by CGWire. Features The Kitsu API can: Store production data: projects, shots, assets, tasks, files, metadata, and validations. Store preview files of any kind. Publish an event stream of changes. Provide folder and file paths for any task. Export main data to CSV files. For more details, you can check the full specification . Quickstart (Docker Image) To try Kitsu on your local machine, you can use Docker to run a local instance via this command: Warning: This image is not aimed at production usage. docker run -d -p 80:80 --name cgwire cgwire/cgwire Then you can access the Kitsu API, through http://localhost/api and enjoy the Kitsu web UI at http://localhost . The credentials are: login: admin@example.com password: mysecretpassword Install Hardware prerequisites Users Cores RAM 1-10 2 4 11 - 30 2 8 31 - 80 4 15 81 - 200 8 30 That's the recommended minimum. But it depends on the activity of the production/studio. The size of the files/videos sent The frequency with which files/videos are sent The network speed available between the workstations and the instance. Regarding disk space, you need to allow for a factor of x2.5 x3 of all the files sent (large estimation). It is advisable to separate: The database on another VM PREVIEW_FOLDER directory on a separate volume This simplifies migration/augmentation of volumes. Pre-requisites The installation requires: Ubuntu (version >= 22.04) Python (version >= 3.10) An up-and-running Postgres instance (version >= 9.2) An up-and-running Redis server instance (version >= 2.0) A Nginx instance Setup Dependencies First, let's install third-party software: sudo apt-get install postgresql postgresql-client postgresql-server-dev-all sudo apt-get install build-essential sudo apt-get install redis-server sudo apt-get install nginx sudo apt-get install xmlsec1 sudo apt-get install ffmpeg NB: We recommend installing Postgres on a separate machine. Install Python 3.12 sudo apt-get install software-properties-common sudo add-apt-repository ppa:deadsnakes/ppa -y sudo apt-get update sudo apt-get install python3.12 python3.12-venv python3.12-dev Get sources Create zou user: sudo useradd --home /opt/zou zou sudo mkdir /opt/zou sudo mkdir /opt/zou/backups sudo chown zou: /opt/zou/backups Install Zou and its dependencies: sudo python3.12 -m venv /opt/zou/zouenv sudo /opt/zou/zouenv/bin/python -m pip install --upgrade pip sudo /opt/zou/zouenv/bin/python -m pip install zou Create a folder to store the previews: sudo mkdir /opt/zou/previews sudo chown -R zou:www-data /opt/zou/previews Create a folder to store the temp files: sudo mkdir /opt/zou/tmp sudo chown -R zou:www-data /opt/zou/tmp Prepare database Create Zou database in Postgres: sudo -u postgres psql -c 'create database zoudb;' -U postgres Set a password for your postgres user. For that start the Postgres CLI: sudo -u postgres psql Then set the password ( mysecretpassword if you want to do some tests). psql (9.4.12) Type \"help\" for help. postgres=# \\password postgres Enter new password: Enter it again: Then, exit from the Postgres client console. Alternatively, if you want to set the password to avoid interactive prompts, use: sudo -u postgres psql -U postgres -d postgres -c \"alter user postgres with password 'mysecretpassword';\" SECRET_KEY must be generated randomly (use pwgen 16 command for that). Create the environment variables file for the database: Path: /etc/zou/zou.env DB_PASSWORD=mysecretpassword PREVIEW_FOLDER=/opt/zou/previews TMP_DIR=/opt/zou/tmp SECRET_KEY=yourrandomsecretkey # If you add variables above, add the exports below export DB_PASSWORD SECRET_KEY PREVIEW_FOLDER TMP_DIR SECRET_KEY You need to have these variables in memory when you run a zou command. The easiest way to do this is to run this command: . /etc/zou/zou.env This line is included with every command in the documentation so that you don't forget it. But you don't have to run it every time. Finally, create database tables (it is required to leave the Postgres console and to activate the Zou virtual environment): # Run it in your bash console. . /etc/zou/zou.env /opt/zou/zouenv/bin/zou init-db NB: You can specify a custom username and database. See the configuration section . Prepare the key-value store Currently, Redis requires no extra configuration. To remove warnings in Redis logs and improve background saving success rate, you can add this to /etc/sysctl.conf : vm.overcommit_memory = 1 If you want to do performance tuning, have a look at this article . Set up the indexer (optional) Create a Meilisearch user: sudo useradd meilisearch Install Meilisearch: echo \"deb [trusted=yes] https://apt.fury.io/meilisearch/ /\" | sudo tee /etc/apt/sources.list.d/fury.list sudo apt-get update && sudo apt-get install meilisearch Create a folder for the index: sudo mkdir /opt/meilisearch sudo chown -R meilisearch: /opt/meilisearch Define a master key then create the service file for Meilisearch: Path: /etc/systemd/system/meilisearch.service [Unit] Description=Meilisearch search engine After=network.target [Service] User=meilisearch Group=meilisearch WorkingDirectory=/opt/meilisearch ExecStart=/usr/bin/meilisearch --master-key=\"masterkey\" [Install] WantedBy=multi-user.target To finish, start the Meilisearch indexer: sudo systemctl enable meilisearch sudo systemctl start meilisearch Configure Gunicorn Configure the main API server First, create a configuration folder: sudo mkdir /etc/zou We need to run the application through gunicorn , a WSGI server that will run zou as a daemon. Let's write the gunicorn configuration: Path: /etc/zou/gunicorn.py accesslog = \"/opt/zou/logs/gunicorn_access.log\" errorlog = \"/opt/zou/logs/gunicorn_error.log\" workers = 3 worker_class = \"gevent\" Let's create the log folder: sudo mkdir /opt/zou/logs sudo chown zou: /opt/zou/logs Then we daemonize the gunicorn process via Systemd. For that, we add a new file that will add a new daemon to be managed by Systemd: Path: /etc/systemd/system/zou.service [Unit] Description=Gunicorn instance to serve the Zou API After=network.target [Service] User=zou Group=www-data WorkingDirectory=/opt/zou # ffmpeg must be in PATH Environment=\"PATH=/opt/zou/zouenv/bin:/usr/bin\" EnvironmentFile=/etc/zou/zou.env ExecStart=/opt/zou/zouenv/bin/gunicorn -c /etc/zou/gunicorn.py -b 127.0.0.1:5000 zou.app:app [Install] WantedBy=multi-user.target Configure Events Stream API server Let's write the gunicorn configuration: Path: /etc/zou/gunicorn-events.py accesslog = \"/opt/zou/logs/gunicorn_events_access.log\" errorlog = \"/opt/zou/logs/gunicorn_events_error.log\" workers = 1 worker_class = \"geventwebsocket.gunicorn.workers.GeventWebSocketWorker\" Then we daemonize the gunicorn process via Systemd: Path: /etc/systemd/system/zou-events.service [Unit] Description=Gunicorn instance to serve the Zou Events API After=network.target [Service] User=zou Group=www-data WorkingDirectory=/opt/zou Environment=\"PATH=/opt/zou/zouenv/bin\" EnvironmentFile=/etc/zou/zou.env ExecStart=/opt/zou/zouenv/bin/gunicorn -c /etc/zou/gunicorn-events.py -b 127.0.0.1:5001 zou.event_stream:app [Install] WantedBy=multi-user.target Configure Nginx Finally, we serve the API through a Nginx server. For that, add this configuration file to Nginx to redirect the traffic to the Gunicorn servers: Path: /etc/nginx/sites-available/zou server { listen 80; server_name server_domain_or_IP; location /api { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_pass http://localhost:5000/; client_max_body_size 500M; proxy_connect_timeout 600s; proxy_send_timeout 600s; proxy_read_timeout 600s; send_timeout 600s; } location /socket.io { proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_pass http://localhost:5001; } } NB: We use the 80 port here to make this documentation simpler but the 443 port and https connection are highly recommended. Finally, make sure that the default configuration is removed: sudo rm /etc/nginx/sites-enabled/default We enable that Nginx configuration with this command: sudo ln -s /etc/nginx/sites-available/zou /etc/nginx/sites-enabled/zou Finally, we can start our daemon and restart Nginx: sudo systemctl enable zou zou-events sudo systemctl start zou zou-events sudo systemctl restart nginx Update Update package First, you have to upgrade the zou package: sudo /opt/zou/zouenv/bin/python -m pip install --upgrade zou Update database schema Then, you need to upgrade the database schema: DB_PASSWORD=mysecretpassword /opt/zou/zouenv/bin/zou upgrade-db Restart the Zou service Finally, restart the Zou service: sudo systemctl restart zou zou-events That's it! Your Zou instance is now up to date. NB: Make it sure by getting the API version number from https://myzoudomain.com/api . Deploying Kitsu Kitsu is a javascript UI that allows to manage Zou data from the browser. Deploying Kitsu requires retrieving the built version. For that let's grab it from Github: sudo mkdir -p /opt/kitsu/dist curl -L -o /tmp/kitsu.tgz $(curl -v https://api.github.com/repos/cgwire/kitsu/releases/latest | grep 'browser_download_url.*kitsu-.*.tgz' | cut -d : -f 2,3 | tr -d \\\") sudo tar xvzf /tmp/kitsu.tgz -C /opt/kitsu/dist/ rm /tmp/kitsu.tgz Then we need to adapt the Nginx configuration to allow it to serve it properly: server { listen 80; server_name server_domain_or_IP; location /api { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_pass http://localhost:5000/; client_max_body_size 500M; proxy_connect_timeout 600s; proxy_send_timeout 600s; proxy_read_timeout 600s; send_timeout 600s; } location /socket.io { proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_pass http://localhost:5001; } location / { autoindex on; root /opt/kitsu/dist; try_files $uri $uri/ /index.html; } } Restart your Nginx server: sudo systemctl restart nginx You can now connect directly to your server IP through your browser and enjoy Kitsu! Update Kitsu To update Kitsu, update the files: sudo rm -rf /opt/kitsu/dist sudo mkdir /opt/kitsu/dist curl -L -o /tmp/kitsu.tgz $(curl -v https://api.github.com/repos/cgwire/kitsu/releases/latest | grep 'browser_download_url.*kitsu-.*.tgz' | cut -d : -f 2,3 | tr -d \\\") sudo tar xvzf /tmp/kitsu.tgz -C /opt/kitsu/dist/ rm /tmp/kitsu.tgz Initialise data: Some basic data are required by Kitsu to work properly (like project status) : . /etc/zou/zou.env /opt/zou/zouenv/bin/zou init-data If you have install the indexer, you can also index the data: . /etc/zou/zou.env /opt/zou/zouenv/bin/zou reset-search-index Admin users To start with Zou you need to add an admin user. This user will be able to log in and create other users. For that go into the terminal and run the zou binary: . /etc/zou/zou.env /opt/zou/zouenv/bin/zou create-admin --password 1SecretPass adminemail@yourstudio.com It expects the password as the first argument. Then your user will be created with the email as login, 1SecretPass as password, and \"Super Admin\" as first name and last name. Configuration To run properly, Zou requires a bunch of parameters you can give through environment variables. These variables can be set in your systemd script. All variables are listed in the configuration section . Available actions To know more about what is possible to do with the CGWire API, refer to the API section . Packaging Get the sources, and increment the version located in the zou/__init__.py file. Tag the repository with the new version and run the following commands: pip install wheel twine python setup.py bdist_wheel twine upload dist/<package>.whl NB: It requires access to Pypi CGWire repository. About authors Kitsu is written by CGWire, a company based in France. We help animation and VFX studios collaborate better through efficient tooling. Visit cg-wire.com for more information.","title":"Home"},{"location":"#welcome-to-the-kitsu-api-zou-documentation","text":"The Kitsu API allows you to store and manage the data of your animation/VFX production. Through it, you can link all the tools of your pipeline and make sure they are all synchronized. To integrate it into your tools, you can rely on the dedicated Python client named Gazu .","title":"Welcome to the Kitsu API (Zou) documentation"},{"location":"#who-is-it-for","text":"The Kitsu API is made for Technical Directors, ITs, and Software Engineers from animation and VFX studios. With this API, they can enhance the tools they provide to the studio departments. On top of the API, you can deploy the Kitsu frontend, which brings you the full bundle of the collaboration platform developed by CGWire.","title":"Who is it for?"},{"location":"#features","text":"The Kitsu API can: Store production data: projects, shots, assets, tasks, files, metadata, and validations. Store preview files of any kind. Publish an event stream of changes. Provide folder and file paths for any task. Export main data to CSV files. For more details, you can check the full specification .","title":"Features"},{"location":"#quickstart-docker-image","text":"To try Kitsu on your local machine, you can use Docker to run a local instance via this command: Warning: This image is not aimed at production usage. docker run -d -p 80:80 --name cgwire cgwire/cgwire Then you can access the Kitsu API, through http://localhost/api and enjoy the Kitsu web UI at http://localhost . The credentials are: login: admin@example.com password: mysecretpassword","title":"Quickstart (Docker Image)"},{"location":"#install","text":"","title":"Install"},{"location":"#hardware-prerequisites","text":"Users Cores RAM 1-10 2 4 11 - 30 2 8 31 - 80 4 15 81 - 200 8 30 That's the recommended minimum. But it depends on the activity of the production/studio. The size of the files/videos sent The frequency with which files/videos are sent The network speed available between the workstations and the instance. Regarding disk space, you need to allow for a factor of x2.5 x3 of all the files sent (large estimation). It is advisable to separate: The database on another VM PREVIEW_FOLDER directory on a separate volume This simplifies migration/augmentation of volumes.","title":"Hardware prerequisites"},{"location":"#pre-requisites","text":"The installation requires: Ubuntu (version >= 22.04) Python (version >= 3.10) An up-and-running Postgres instance (version >= 9.2) An up-and-running Redis server instance (version >= 2.0) A Nginx instance","title":"Pre-requisites"},{"location":"#setup","text":"","title":"Setup"},{"location":"#dependencies","text":"First, let's install third-party software: sudo apt-get install postgresql postgresql-client postgresql-server-dev-all sudo apt-get install build-essential sudo apt-get install redis-server sudo apt-get install nginx sudo apt-get install xmlsec1 sudo apt-get install ffmpeg NB: We recommend installing Postgres on a separate machine.","title":"Dependencies"},{"location":"#install-python-312","text":"sudo apt-get install software-properties-common sudo add-apt-repository ppa:deadsnakes/ppa -y sudo apt-get update sudo apt-get install python3.12 python3.12-venv python3.12-dev","title":"Install Python 3.12"},{"location":"#get-sources","text":"Create zou user: sudo useradd --home /opt/zou zou sudo mkdir /opt/zou sudo mkdir /opt/zou/backups sudo chown zou: /opt/zou/backups Install Zou and its dependencies: sudo python3.12 -m venv /opt/zou/zouenv sudo /opt/zou/zouenv/bin/python -m pip install --upgrade pip sudo /opt/zou/zouenv/bin/python -m pip install zou Create a folder to store the previews: sudo mkdir /opt/zou/previews sudo chown -R zou:www-data /opt/zou/previews Create a folder to store the temp files: sudo mkdir /opt/zou/tmp sudo chown -R zou:www-data /opt/zou/tmp","title":"Get sources"},{"location":"#prepare-database","text":"Create Zou database in Postgres: sudo -u postgres psql -c 'create database zoudb;' -U postgres Set a password for your postgres user. For that start the Postgres CLI: sudo -u postgres psql Then set the password ( mysecretpassword if you want to do some tests). psql (9.4.12) Type \"help\" for help. postgres=# \\password postgres Enter new password: Enter it again: Then, exit from the Postgres client console. Alternatively, if you want to set the password to avoid interactive prompts, use: sudo -u postgres psql -U postgres -d postgres -c \"alter user postgres with password 'mysecretpassword';\" SECRET_KEY must be generated randomly (use pwgen 16 command for that). Create the environment variables file for the database: Path: /etc/zou/zou.env DB_PASSWORD=mysecretpassword PREVIEW_FOLDER=/opt/zou/previews TMP_DIR=/opt/zou/tmp SECRET_KEY=yourrandomsecretkey # If you add variables above, add the exports below export DB_PASSWORD SECRET_KEY PREVIEW_FOLDER TMP_DIR SECRET_KEY You need to have these variables in memory when you run a zou command. The easiest way to do this is to run this command: . /etc/zou/zou.env This line is included with every command in the documentation so that you don't forget it. But you don't have to run it every time. Finally, create database tables (it is required to leave the Postgres console and to activate the Zou virtual environment): # Run it in your bash console. . /etc/zou/zou.env /opt/zou/zouenv/bin/zou init-db NB: You can specify a custom username and database. See the configuration section .","title":"Prepare database"},{"location":"#prepare-the-key-value-store","text":"Currently, Redis requires no extra configuration. To remove warnings in Redis logs and improve background saving success rate, you can add this to /etc/sysctl.conf : vm.overcommit_memory = 1 If you want to do performance tuning, have a look at this article .","title":"Prepare the key-value store"},{"location":"#set-up-the-indexer-optional","text":"Create a Meilisearch user: sudo useradd meilisearch Install Meilisearch: echo \"deb [trusted=yes] https://apt.fury.io/meilisearch/ /\" | sudo tee /etc/apt/sources.list.d/fury.list sudo apt-get update && sudo apt-get install meilisearch Create a folder for the index: sudo mkdir /opt/meilisearch sudo chown -R meilisearch: /opt/meilisearch Define a master key then create the service file for Meilisearch: Path: /etc/systemd/system/meilisearch.service [Unit] Description=Meilisearch search engine After=network.target [Service] User=meilisearch Group=meilisearch WorkingDirectory=/opt/meilisearch ExecStart=/usr/bin/meilisearch --master-key=\"masterkey\" [Install] WantedBy=multi-user.target To finish, start the Meilisearch indexer: sudo systemctl enable meilisearch sudo systemctl start meilisearch","title":"Set up the indexer (optional)"},{"location":"#configure-gunicorn","text":"","title":"Configure Gunicorn"},{"location":"#configure-the-main-api-server","text":"First, create a configuration folder: sudo mkdir /etc/zou We need to run the application through gunicorn , a WSGI server that will run zou as a daemon. Let's write the gunicorn configuration: Path: /etc/zou/gunicorn.py accesslog = \"/opt/zou/logs/gunicorn_access.log\" errorlog = \"/opt/zou/logs/gunicorn_error.log\" workers = 3 worker_class = \"gevent\" Let's create the log folder: sudo mkdir /opt/zou/logs sudo chown zou: /opt/zou/logs Then we daemonize the gunicorn process via Systemd. For that, we add a new file that will add a new daemon to be managed by Systemd: Path: /etc/systemd/system/zou.service [Unit] Description=Gunicorn instance to serve the Zou API After=network.target [Service] User=zou Group=www-data WorkingDirectory=/opt/zou # ffmpeg must be in PATH Environment=\"PATH=/opt/zou/zouenv/bin:/usr/bin\" EnvironmentFile=/etc/zou/zou.env ExecStart=/opt/zou/zouenv/bin/gunicorn -c /etc/zou/gunicorn.py -b 127.0.0.1:5000 zou.app:app [Install] WantedBy=multi-user.target","title":"Configure the main API server"},{"location":"#configure-events-stream-api-server","text":"Let's write the gunicorn configuration: Path: /etc/zou/gunicorn-events.py accesslog = \"/opt/zou/logs/gunicorn_events_access.log\" errorlog = \"/opt/zou/logs/gunicorn_events_error.log\" workers = 1 worker_class = \"geventwebsocket.gunicorn.workers.GeventWebSocketWorker\" Then we daemonize the gunicorn process via Systemd: Path: /etc/systemd/system/zou-events.service [Unit] Description=Gunicorn instance to serve the Zou Events API After=network.target [Service] User=zou Group=www-data WorkingDirectory=/opt/zou Environment=\"PATH=/opt/zou/zouenv/bin\" EnvironmentFile=/etc/zou/zou.env ExecStart=/opt/zou/zouenv/bin/gunicorn -c /etc/zou/gunicorn-events.py -b 127.0.0.1:5001 zou.event_stream:app [Install] WantedBy=multi-user.target","title":"Configure Events Stream API server"},{"location":"#configure-nginx","text":"Finally, we serve the API through a Nginx server. For that, add this configuration file to Nginx to redirect the traffic to the Gunicorn servers: Path: /etc/nginx/sites-available/zou server { listen 80; server_name server_domain_or_IP; location /api { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_pass http://localhost:5000/; client_max_body_size 500M; proxy_connect_timeout 600s; proxy_send_timeout 600s; proxy_read_timeout 600s; send_timeout 600s; } location /socket.io { proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_pass http://localhost:5001; } } NB: We use the 80 port here to make this documentation simpler but the 443 port and https connection are highly recommended. Finally, make sure that the default configuration is removed: sudo rm /etc/nginx/sites-enabled/default We enable that Nginx configuration with this command: sudo ln -s /etc/nginx/sites-available/zou /etc/nginx/sites-enabled/zou Finally, we can start our daemon and restart Nginx: sudo systemctl enable zou zou-events sudo systemctl start zou zou-events sudo systemctl restart nginx","title":"Configure Nginx"},{"location":"#update","text":"","title":"Update"},{"location":"#update-package","text":"First, you have to upgrade the zou package: sudo /opt/zou/zouenv/bin/python -m pip install --upgrade zou","title":"Update package"},{"location":"#update-database-schema","text":"Then, you need to upgrade the database schema: DB_PASSWORD=mysecretpassword /opt/zou/zouenv/bin/zou upgrade-db","title":"Update database schema"},{"location":"#restart-the-zou-service","text":"Finally, restart the Zou service: sudo systemctl restart zou zou-events That's it! Your Zou instance is now up to date. NB: Make it sure by getting the API version number from https://myzoudomain.com/api .","title":"Restart the Zou service"},{"location":"#deploying-kitsu","text":"Kitsu is a javascript UI that allows to manage Zou data from the browser. Deploying Kitsu requires retrieving the built version. For that let's grab it from Github: sudo mkdir -p /opt/kitsu/dist curl -L -o /tmp/kitsu.tgz $(curl -v https://api.github.com/repos/cgwire/kitsu/releases/latest | grep 'browser_download_url.*kitsu-.*.tgz' | cut -d : -f 2,3 | tr -d \\\") sudo tar xvzf /tmp/kitsu.tgz -C /opt/kitsu/dist/ rm /tmp/kitsu.tgz Then we need to adapt the Nginx configuration to allow it to serve it properly: server { listen 80; server_name server_domain_or_IP; location /api { proxy_set_header X-Real-IP $remote_addr; proxy_set_header Host $host; proxy_pass http://localhost:5000/; client_max_body_size 500M; proxy_connect_timeout 600s; proxy_send_timeout 600s; proxy_read_timeout 600s; send_timeout 600s; } location /socket.io { proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_pass http://localhost:5001; } location / { autoindex on; root /opt/kitsu/dist; try_files $uri $uri/ /index.html; } } Restart your Nginx server: sudo systemctl restart nginx You can now connect directly to your server IP through your browser and enjoy Kitsu!","title":"Deploying Kitsu"},{"location":"#update-kitsu","text":"To update Kitsu, update the files: sudo rm -rf /opt/kitsu/dist sudo mkdir /opt/kitsu/dist curl -L -o /tmp/kitsu.tgz $(curl -v https://api.github.com/repos/cgwire/kitsu/releases/latest | grep 'browser_download_url.*kitsu-.*.tgz' | cut -d : -f 2,3 | tr -d \\\") sudo tar xvzf /tmp/kitsu.tgz -C /opt/kitsu/dist/ rm /tmp/kitsu.tgz","title":"Update Kitsu"},{"location":"#initialise-data","text":"Some basic data are required by Kitsu to work properly (like project status) : . /etc/zou/zou.env /opt/zou/zouenv/bin/zou init-data If you have install the indexer, you can also index the data: . /etc/zou/zou.env /opt/zou/zouenv/bin/zou reset-search-index","title":"Initialise data:"},{"location":"#admin-users","text":"To start with Zou you need to add an admin user. This user will be able to log in and create other users. For that go into the terminal and run the zou binary: . /etc/zou/zou.env /opt/zou/zouenv/bin/zou create-admin --password 1SecretPass adminemail@yourstudio.com It expects the password as the first argument. Then your user will be created with the email as login, 1SecretPass as password, and \"Super Admin\" as first name and last name.","title":"Admin users"},{"location":"#configuration","text":"To run properly, Zou requires a bunch of parameters you can give through environment variables. These variables can be set in your systemd script. All variables are listed in the configuration section .","title":"Configuration"},{"location":"#available-actions","text":"To know more about what is possible to do with the CGWire API, refer to the API section .","title":"Available actions"},{"location":"#packaging","text":"Get the sources, and increment the version located in the zou/__init__.py file. Tag the repository with the new version and run the following commands: pip install wheel twine python setup.py bdist_wheel twine upload dist/<package>.whl NB: It requires access to Pypi CGWire repository.","title":"Packaging"},{"location":"#about-authors","text":"Kitsu is written by CGWire, a company based in France. We help animation and VFX studios collaborate better through efficient tooling. Visit cg-wire.com for more information.","title":"About authors"},{"location":"api/","text":"API The Zou API is REST-based. If you are looking for a Python client, see Gazu . Authentication Before you can use any of the endpoints outline below, you will have to get a JWT to authorize your requests. You can get a authorization token using a (form-encoded) POST request to /auth/login . With curl this would look something like curl -X POST <server_address>/auth/login -d \"email=<youremail>&password=<yourpassword> . The response is a JSON object, specifically you'll need to provide the access_token for your future requests. Here is a complete authentication process as an example (again using curl ): $ curl -X POST <server_address>/api/auth/login -d \"email=<youremail>&password=<yourpassword> {\"login\": true\", \"access_token\": \"eyJ0e...\", ...} $ jwt=eyJ0e... # Store the access token for easier use $ curl -H \"Authorization: Bearer $jwt\" <server_address>/api/data/projects [{...}, {...}] HTTP routes The full specification of the API is available at the OpenAPI format here: https://api-docs.kitsu.cloud Available data Data you can store and retrieve are listed in the specification: Models specification","title":"API"},{"location":"api/#api","text":"The Zou API is REST-based. If you are looking for a Python client, see Gazu .","title":"API"},{"location":"api/#authentication","text":"Before you can use any of the endpoints outline below, you will have to get a JWT to authorize your requests. You can get a authorization token using a (form-encoded) POST request to /auth/login . With curl this would look something like curl -X POST <server_address>/auth/login -d \"email=<youremail>&password=<yourpassword> . The response is a JSON object, specifically you'll need to provide the access_token for your future requests. Here is a complete authentication process as an example (again using curl ): $ curl -X POST <server_address>/api/auth/login -d \"email=<youremail>&password=<yourpassword> {\"login\": true\", \"access_token\": \"eyJ0e...\", ...} $ jwt=eyJ0e... # Store the access token for easier use $ curl -H \"Authorization: Bearer $jwt\" <server_address>/api/data/projects [{...}, {...}]","title":"Authentication"},{"location":"api/#http-routes","text":"The full specification of the API is available at the OpenAPI format here: https://api-docs.kitsu.cloud","title":"HTTP routes"},{"location":"api/#available-data","text":"Data you can store and retrieve are listed in the specification: Models specification","title":"Available data"},{"location":"backup/","text":"Backup It's a good practice to backup your database and your preview files. Here is a quick guide to backup all the required files. You will find information too about how to restore them. Backup database To run a backup of the Zou database, run the following command: cd /opt/zou/backups . /etc/zou/zou.env /opt/zou/zouenv/bin/zou dump-database All data will be stored in a file in the current directory. The generated file name will follow this format: 2021-03-21-zou-db-backup.sql.gz Restoration To restore the database to a new Postgres instance make sure the source and target version of the api match, otherwise the database schema may not match, if all matches run gunzip 2021-03-21-zou-db-backup.sql.gz createdb -h localhost -p 5432 -U postgres targetdb psql -h yourphost -p 5432 -U postgres -1 -d targetdb -f 2021-03-21-zou-db-backup.sql you can also just write directly to zoudb (the default database): gunzip 2021-03-21-zou-db-backup.sql.gz psql -h yourphost -p 5432 -U postgres -1 -d zoudb -f 2021-03-21-zou-db-backup.sql when writing to a previously created database, make sure to terminate all the connections to said database by using the following statement: SELECT pg_terminate_backend (pid) FROM pg_stat_activity WHERE datname = 'zoudb'; you can also change the name of a database to convert it to the default db: ALTER DATABASE targetdb RENAME TO zoudb; you can also change the database being used by using an environment variable in /etc/zou/zou.env DB_DATABASE=targetdb Backup files If you rely on an object storage, you have to check with your provider that your data are properly replicated. If you store your files directly on your drive, you must backup the preview folder ( /opt/zou/previews by default). There are plenty of documentation and tools available on the internet to do that. We won't cover this subject here. Restoration To restore the files you simply have to put the files from your backups the directory you want. Then make sure thate the PREVIEW_FOLDER environment variable targets it properly.","title":"Backup"},{"location":"backup/#backup","text":"It's a good practice to backup your database and your preview files. Here is a quick guide to backup all the required files. You will find information too about how to restore them.","title":"Backup"},{"location":"backup/#backup-database","text":"To run a backup of the Zou database, run the following command: cd /opt/zou/backups . /etc/zou/zou.env /opt/zou/zouenv/bin/zou dump-database All data will be stored in a file in the current directory. The generated file name will follow this format: 2021-03-21-zou-db-backup.sql.gz Restoration To restore the database to a new Postgres instance make sure the source and target version of the api match, otherwise the database schema may not match, if all matches run gunzip 2021-03-21-zou-db-backup.sql.gz createdb -h localhost -p 5432 -U postgres targetdb psql -h yourphost -p 5432 -U postgres -1 -d targetdb -f 2021-03-21-zou-db-backup.sql you can also just write directly to zoudb (the default database): gunzip 2021-03-21-zou-db-backup.sql.gz psql -h yourphost -p 5432 -U postgres -1 -d zoudb -f 2021-03-21-zou-db-backup.sql when writing to a previously created database, make sure to terminate all the connections to said database by using the following statement: SELECT pg_terminate_backend (pid) FROM pg_stat_activity WHERE datname = 'zoudb'; you can also change the name of a database to convert it to the default db: ALTER DATABASE targetdb RENAME TO zoudb; you can also change the database being used by using an environment variable in /etc/zou/zou.env DB_DATABASE=targetdb","title":"Backup database"},{"location":"backup/#backup-files","text":"If you rely on an object storage, you have to check with your provider that your data are properly replicated. If you store your files directly on your drive, you must backup the preview folder ( /opt/zou/previews by default). There are plenty of documentation and tools available on the internet to do that. We won't cover this subject here. Restoration To restore the files you simply have to put the files from your backups the directory you want. Then make sure thate the PREVIEW_FOLDER environment variable targets it properly.","title":"Backup files"},{"location":"configuration/","text":"Configuration Zou requires several configuration parameters. In the following, you will find the list of all expected parameters. Database DB_HOST (default: localhost): The database server host. DB_PORT (default: 5432): The port on which the database is running. DB_USERNAME (default: postgres): The username used to access the database. DB_PASSWORD (default: mysecretpassword): The password used to access the database. DB_DATABASE (default: zoudb): The database name to use. DB_POOL_SIZE (default: 30): The number of connections opened simultaneously to access the database. DB_MAX_OVERFLOW (default: 60): The number of additional connections available once the pool is full. They are disconnected when the request is finished. They are not reused. Key-Value store KV_HOST (default: localhost): The Redis server host. KV_PORT (default: 6379): The Redis server port. Indexer Kitsu uses the Meilisearch service for its indexation. INDEXER_KEY (default: masterkey): The key required by Meilisearch. INDEXER_HOST (default: localhost): The Meilisearch host. INDEXER_PORT (default: 7700): The Meilisearch port. Authentication AUTH_STRATEGY (default: auth_local_classic): Allow to choose between traditional auth and Active Directory auth (auth_remote_active_directory). SECRET_KEY (default: mysecretkey) Complex key used for auth token encryption. Previews PREVIEW_FOLDER (default: ./previews): The folder where thumbnails will be stored. The default value is set for development environments. We encourage you to set an absolute path when you use it in production. REMOVE_FILES (default: \"False\"): Delete files when deleting comments and revisions Users USER_LIMIT (default: \"100\"): Max number of users MIN_PASSWORD_LENGTH (default: \"8\"): The minimum password length DEFAULT_TIMEZONE (default: \"Europe/Paris\"): The default timezone for new user accounts DEFAULT_LOCALE (default: \"en_US\"): The default language for new user accounts Emails The email configuration is required for emails sent after a password reset and, email notifications. MAIL_SERVER (default: \"localhost\"): The host of your email server MAIL_PORT (default: \"25\"): The port of your email server MAIL_USERNAME (default: \"\"): The username to access to your mail server MAIL_PASSWORD (default: \"\"): The password to access to your mail server MAIL_DEBUG (default: \"0\"): Set 1 if you are in a development environment (emails are printed in the console instead of being sent). MAIL_USE_TLS (default: \"False\"): To use TLS to communicate with the email server. MAIL_USE_SSL (default: \"False\"): To use SSL to communicate with the email server. MAIL_DEFAULT_SENDER (default: \"no-reply@cg-wire.com\"): To set the sender email. DOMAIN_NAME (default: \"localhost:8080\"): To build URLs (for a password reset for instance). DOMAIN_PROTOCOL (default: \"https\"): To build URLs (for a password reset for instance). You can find more information here: https://flask-mail.readthedocs.io/en/latest/ Indexes INDEXES_FOLDER (default: \"./indexes\"): The folder to store your indexes, we recommend to set a full path here. S3 Storage If you want to store your previews in an S3 backend, add the following variables (we assume that you created a programmatic user that can access to S3). FS_BACKEND : Set this variable with \"s3\" FS_BUCKET_PREFIX : A prefix for your bucket names. It's mandatory to set it to properly use S3. FS_S3_REGION : Example: eu-west-3 FS_S3_ENDPOINT : The url of your region. Example: https://s3.eu-west-3.amazonaws.com FS_S3_ACCESS_KEY : Your user access key. FS_S3_SECRET_KEY : Your user secret key. Then install the following package in your virtual environment: cd /opt/zou . zouenv/bin/activate pip install boto3 When you restart Zou, it should use S3 to store and retrieve files. Swift Storage If you want to store your previews in a Swift backend, add the following variables (Only Auth 2.0 and 3.0 are supported). FS_BACKEND : Set this variable with \"swift\" FS_BUCKET_PREFIX : A prefix for your bucket/container names. FS_SWIFT_AUTH_URL : Authentication URL of your swift backend. FS_SWIFT_USER : Your Swift login. FS_SWIFT_TENANT_NAME : The Swift tenant name. FS_SWIFT_KEY : Your Swift password. FS_SWIFT_REGION_NAME : Your Swift region name. LDAP These variables are active only if auth_remote_ldap strategy is selected. LDAP_HOST (default: \"127.0.0.1\"): The IP address of your LDAP server. LDAP_PORT (default: \"389\"): The listening port of your LDAP server. LDAP_BASE_DN (default: \"CN=Users,DC=studio,DC=local\"): The base domain of your LDAP configuration. LDAP_DOMAIN (default: \"studio.local\"): The domain used for your LDAP authentication (NTLM). LDAP_FALLBACK (default: \"False\"): Set to True if you want to allow admins to fallback on default auth strategy when the LDAP server is down. LDAP_IS_AD (default: \"False\"): Set to True if you use LDAP with an active directory. Job queue ENABLE_JOB_QUEUE (default: \"False\"): Set to True if you want to send asynchronous tasks to the zou-jobs service. JOB_QUEUE_TIMEOUT (default: 3600): Set the timeout (in seconds) for preview and playlist encoding jobs sent to the zou-jobs service. ENABLE_JOB_QUEUE_REMOTE (default: \"False\"): Set to True if you want to send playlist builds to a Nomad cluster. Misc TMP_DIR (default: /tmp): The temporary directory used to handle uploads. DEBUG (default: False): Activate the debug mode for development purposes. CRISP TOKEN (default: ): Activate the Crisp support chatbox on the bottom right.","title":"Configuration"},{"location":"configuration/#configuration","text":"Zou requires several configuration parameters. In the following, you will find the list of all expected parameters.","title":"Configuration"},{"location":"configuration/#database","text":"DB_HOST (default: localhost): The database server host. DB_PORT (default: 5432): The port on which the database is running. DB_USERNAME (default: postgres): The username used to access the database. DB_PASSWORD (default: mysecretpassword): The password used to access the database. DB_DATABASE (default: zoudb): The database name to use. DB_POOL_SIZE (default: 30): The number of connections opened simultaneously to access the database. DB_MAX_OVERFLOW (default: 60): The number of additional connections available once the pool is full. They are disconnected when the request is finished. They are not reused.","title":"Database"},{"location":"configuration/#key-value-store","text":"KV_HOST (default: localhost): The Redis server host. KV_PORT (default: 6379): The Redis server port.","title":"Key-Value store"},{"location":"configuration/#indexer","text":"Kitsu uses the Meilisearch service for its indexation. INDEXER_KEY (default: masterkey): The key required by Meilisearch. INDEXER_HOST (default: localhost): The Meilisearch host. INDEXER_PORT (default: 7700): The Meilisearch port.","title":"Indexer"},{"location":"configuration/#authentication","text":"AUTH_STRATEGY (default: auth_local_classic): Allow to choose between traditional auth and Active Directory auth (auth_remote_active_directory). SECRET_KEY (default: mysecretkey) Complex key used for auth token encryption.","title":"Authentication"},{"location":"configuration/#previews","text":"PREVIEW_FOLDER (default: ./previews): The folder where thumbnails will be stored. The default value is set for development environments. We encourage you to set an absolute path when you use it in production. REMOVE_FILES (default: \"False\"): Delete files when deleting comments and revisions","title":"Previews"},{"location":"configuration/#users","text":"USER_LIMIT (default: \"100\"): Max number of users MIN_PASSWORD_LENGTH (default: \"8\"): The minimum password length DEFAULT_TIMEZONE (default: \"Europe/Paris\"): The default timezone for new user accounts DEFAULT_LOCALE (default: \"en_US\"): The default language for new user accounts","title":"Users"},{"location":"configuration/#emails","text":"The email configuration is required for emails sent after a password reset and, email notifications. MAIL_SERVER (default: \"localhost\"): The host of your email server MAIL_PORT (default: \"25\"): The port of your email server MAIL_USERNAME (default: \"\"): The username to access to your mail server MAIL_PASSWORD (default: \"\"): The password to access to your mail server MAIL_DEBUG (default: \"0\"): Set 1 if you are in a development environment (emails are printed in the console instead of being sent). MAIL_USE_TLS (default: \"False\"): To use TLS to communicate with the email server. MAIL_USE_SSL (default: \"False\"): To use SSL to communicate with the email server. MAIL_DEFAULT_SENDER (default: \"no-reply@cg-wire.com\"): To set the sender email. DOMAIN_NAME (default: \"localhost:8080\"): To build URLs (for a password reset for instance). DOMAIN_PROTOCOL (default: \"https\"): To build URLs (for a password reset for instance). You can find more information here: https://flask-mail.readthedocs.io/en/latest/","title":"Emails"},{"location":"configuration/#indexes","text":"INDEXES_FOLDER (default: \"./indexes\"): The folder to store your indexes, we recommend to set a full path here.","title":"Indexes"},{"location":"configuration/#s3-storage","text":"If you want to store your previews in an S3 backend, add the following variables (we assume that you created a programmatic user that can access to S3). FS_BACKEND : Set this variable with \"s3\" FS_BUCKET_PREFIX : A prefix for your bucket names. It's mandatory to set it to properly use S3. FS_S3_REGION : Example: eu-west-3 FS_S3_ENDPOINT : The url of your region. Example: https://s3.eu-west-3.amazonaws.com FS_S3_ACCESS_KEY : Your user access key. FS_S3_SECRET_KEY : Your user secret key. Then install the following package in your virtual environment: cd /opt/zou . zouenv/bin/activate pip install boto3 When you restart Zou, it should use S3 to store and retrieve files.","title":"S3 Storage"},{"location":"configuration/#swift-storage","text":"If you want to store your previews in a Swift backend, add the following variables (Only Auth 2.0 and 3.0 are supported). FS_BACKEND : Set this variable with \"swift\" FS_BUCKET_PREFIX : A prefix for your bucket/container names. FS_SWIFT_AUTH_URL : Authentication URL of your swift backend. FS_SWIFT_USER : Your Swift login. FS_SWIFT_TENANT_NAME : The Swift tenant name. FS_SWIFT_KEY : Your Swift password. FS_SWIFT_REGION_NAME : Your Swift region name.","title":"Swift Storage"},{"location":"configuration/#ldap","text":"These variables are active only if auth_remote_ldap strategy is selected. LDAP_HOST (default: \"127.0.0.1\"): The IP address of your LDAP server. LDAP_PORT (default: \"389\"): The listening port of your LDAP server. LDAP_BASE_DN (default: \"CN=Users,DC=studio,DC=local\"): The base domain of your LDAP configuration. LDAP_DOMAIN (default: \"studio.local\"): The domain used for your LDAP authentication (NTLM). LDAP_FALLBACK (default: \"False\"): Set to True if you want to allow admins to fallback on default auth strategy when the LDAP server is down. LDAP_IS_AD (default: \"False\"): Set to True if you use LDAP with an active directory.","title":"LDAP"},{"location":"configuration/#job-queue","text":"ENABLE_JOB_QUEUE (default: \"False\"): Set to True if you want to send asynchronous tasks to the zou-jobs service. JOB_QUEUE_TIMEOUT (default: 3600): Set the timeout (in seconds) for preview and playlist encoding jobs sent to the zou-jobs service. ENABLE_JOB_QUEUE_REMOTE (default: \"False\"): Set to True if you want to send playlist builds to a Nomad cluster.","title":"Job queue"},{"location":"configuration/#misc","text":"TMP_DIR (default: /tmp): The temporary directory used to handle uploads. DEBUG (default: False): Activate the debug mode for development purposes. CRISP TOKEN (default: ): Activate the Crisp support chatbox on the bottom right.","title":"Misc"},{"location":"development/","text":"Development environment To start with developing on Zou, you need Python 3 installed and a Postgres database instance. Database To run Postgres, we recommend using Docker (it's simpler, and it won't impact your local system): sudo docker pull postgres sudo docker run \\ --name postgres \\ -p 5432:5432 \\ -e POSTGRES_PASSWORD=mysecretpassword \\ -d postgres Key-value store To run Redis, we recommend using Docker again: sudo docker pull redis sudo docker run \\ --name redis \\ -p 6379:6379 \\ -d redis Indexer To run Meilisearch, we recommend using Docker again: sudo docker pull getmeili/meilisearch:v1.8.3 sudo docker run -it --rm \\ --name meilisearch \\ -p 7700:7700 \\ -e MEILI_ENV='development' \\ -e MEILI_MASTER_KEY='meilimasterkey' \\ -v $(pwd)/meili_data:/meili_data \\ -d getmeili/meilisearch:v1.5 FFMPEG For video operations, FFMPEG is required. For that, install it through your OS package manager: sudo apt-get install ffmpeg Source and dependencies Then get Zou sources: git clone git@github.com:cgwire/zou.git Install virtualenvwrapper : pip install virtualenvwrapper Add configuration for virtualenvwrapper to your .bashrc: export WORKON_HOME=directory_for_virtualenvs VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 source ~/.local/bin/virtualenvwrapper.sh Create a virtual environment with mkvirtualenv : mkvirtualenv zou workon zou Install dependencies: pip install -r requirements.txt Init data Create a database in Postgres named zoudb with user postgres and password mysecretpassword . Then init db: python zou/cli.py clear-db python zou/cli.py init-db python zou/cli.py init-data Create a first user: python zou/cli.py create-admin super.user@mycgstudio.com --password=mysecretpassword Run server: PREVIEW_FOLDER=$PWD/previews DEBUG=1 MAIL_DEBUG=1 FLASK_DEBUG=1 FLASK_APP=zou.app INDEXER_KEY=meilimasterkey python zou/debug.py You can now use the API by requesting http://localhost:5000 . Update database In case of adding/removing attributes of models, you must generate the DB update file: python zou/cli.py migrate-db Event server To run the Server Events server used to update the web GUI in realtime, use the following command. gunicorn --worker-class geventwebsocket.gunicorn.workers.GeventWebSocketWorker -b 127.0.0.1:5001 -w 1 zou.event_stream:app Tests To run unit tests, we recommend using another database. Create a testing database In the CLI of the hosting, the PostgreSQL DB executes the following: If Docker, connect with: docker exec -it postgres bash sudo su -l postgres psql -c 'create database zoutest;' -U postgres Run the tests In your zou environment workon zou , execute the tests with the DB_DATABASE environment variable: DB_DATABASE=zoutest py.test If you want to run a specific test (you can list several): DB_DATABASE=zoutest py.test tests/models/test_entity_type.py Debug email sending If you set properly the MAIL_DEBUG=1 flag, the body of each sent email is displayed in the console.","title":"Development environment"},{"location":"development/#development-environment","text":"To start with developing on Zou, you need Python 3 installed and a Postgres database instance.","title":"Development environment"},{"location":"development/#database","text":"To run Postgres, we recommend using Docker (it's simpler, and it won't impact your local system): sudo docker pull postgres sudo docker run \\ --name postgres \\ -p 5432:5432 \\ -e POSTGRES_PASSWORD=mysecretpassword \\ -d postgres","title":"Database"},{"location":"development/#key-value-store","text":"To run Redis, we recommend using Docker again: sudo docker pull redis sudo docker run \\ --name redis \\ -p 6379:6379 \\ -d redis","title":"Key-value store"},{"location":"development/#indexer","text":"To run Meilisearch, we recommend using Docker again: sudo docker pull getmeili/meilisearch:v1.8.3 sudo docker run -it --rm \\ --name meilisearch \\ -p 7700:7700 \\ -e MEILI_ENV='development' \\ -e MEILI_MASTER_KEY='meilimasterkey' \\ -v $(pwd)/meili_data:/meili_data \\ -d getmeili/meilisearch:v1.5","title":"Indexer"},{"location":"development/#ffmpeg","text":"For video operations, FFMPEG is required. For that, install it through your OS package manager: sudo apt-get install ffmpeg","title":"FFMPEG"},{"location":"development/#source-and-dependencies","text":"Then get Zou sources: git clone git@github.com:cgwire/zou.git Install virtualenvwrapper : pip install virtualenvwrapper Add configuration for virtualenvwrapper to your .bashrc: export WORKON_HOME=directory_for_virtualenvs VIRTUALENVWRAPPER_PYTHON=/usr/bin/python3 source ~/.local/bin/virtualenvwrapper.sh Create a virtual environment with mkvirtualenv : mkvirtualenv zou workon zou Install dependencies: pip install -r requirements.txt","title":"Source and dependencies"},{"location":"development/#init-data","text":"Create a database in Postgres named zoudb with user postgres and password mysecretpassword . Then init db: python zou/cli.py clear-db python zou/cli.py init-db python zou/cli.py init-data Create a first user: python zou/cli.py create-admin super.user@mycgstudio.com --password=mysecretpassword Run server: PREVIEW_FOLDER=$PWD/previews DEBUG=1 MAIL_DEBUG=1 FLASK_DEBUG=1 FLASK_APP=zou.app INDEXER_KEY=meilimasterkey python zou/debug.py You can now use the API by requesting http://localhost:5000 .","title":"Init data"},{"location":"development/#update-database","text":"In case of adding/removing attributes of models, you must generate the DB update file: python zou/cli.py migrate-db","title":"Update database"},{"location":"development/#event-server","text":"To run the Server Events server used to update the web GUI in realtime, use the following command. gunicorn --worker-class geventwebsocket.gunicorn.workers.GeventWebSocketWorker -b 127.0.0.1:5001 -w 1 zou.event_stream:app","title":"Event server"},{"location":"development/#tests","text":"To run unit tests, we recommend using another database.","title":"Tests"},{"location":"development/#create-a-testing-database","text":"In the CLI of the hosting, the PostgreSQL DB executes the following: If Docker, connect with: docker exec -it postgres bash sudo su -l postgres psql -c 'create database zoutest;' -U postgres","title":"Create a testing database"},{"location":"development/#run-the-tests","text":"In your zou environment workon zou , execute the tests with the DB_DATABASE environment variable: DB_DATABASE=zoutest py.test If you want to run a specific test (you can list several): DB_DATABASE=zoutest py.test tests/models/test_entity_type.py","title":"Run the tests"},{"location":"development/#debug-email-sending","text":"If you set properly the MAIL_DEBUG=1 flag, the body of each sent email is displayed in the console.","title":"Debug email sending"},{"location":"events/","text":"Events Events are a mechanism to allow other programs to react to the change happening into the API data. Define a location for your event handlers Create the events folder: mkdir /opt/zou/event_handlers Then set EVENT_HANDLERS_FOLDER environment variable with the folder that will contain the event handler module: /opt/zou/event_handlers . Write an event handler Your event definition should be located at the root of your event handlers folder. Your handler should only implement one function named handle_event . It takes data sent with the event as parameter. from flask import current_app def handle_event(data): current_app.logger.info(\"Event occured!\") Register an event handler To register an event you must fill the event_map dict located in the __init__.py file of your event handlers folder. The key of the dict is the event name that will trigger an event handler, the value is the event handler itself. Let's see an example: from . import shotgun_wip, shotgun_pending_review event_map = { \"task:start\": shotgun_wip, \"task:to-review\": shotgun_pending_review } This is how your folder should look like: ls /opt/zou/event_handlers __init__.py shotgun_wip.py shotgun_pending_review.py Listen to events through websocket You can list to events externally. For that, please read the events documentation of the Python client.","title":"Events"},{"location":"events/#events","text":"Events are a mechanism to allow other programs to react to the change happening into the API data.","title":"Events"},{"location":"events/#define-a-location-for-your-event-handlers","text":"Create the events folder: mkdir /opt/zou/event_handlers Then set EVENT_HANDLERS_FOLDER environment variable with the folder that will contain the event handler module: /opt/zou/event_handlers .","title":"Define a location for your event handlers"},{"location":"events/#write-an-event-handler","text":"Your event definition should be located at the root of your event handlers folder. Your handler should only implement one function named handle_event . It takes data sent with the event as parameter. from flask import current_app def handle_event(data): current_app.logger.info(\"Event occured!\")","title":"Write an event handler"},{"location":"events/#register-an-event-handler","text":"To register an event you must fill the event_map dict located in the __init__.py file of your event handlers folder. The key of the dict is the event name that will trigger an event handler, the value is the event handler itself. Let's see an example: from . import shotgun_wip, shotgun_pending_review event_map = { \"task:start\": shotgun_wip, \"task:to-review\": shotgun_pending_review } This is how your folder should look like: ls /opt/zou/event_handlers __init__.py shotgun_wip.py shotgun_pending_review.py","title":"Register an event handler"},{"location":"events/#listen-to-events-through-websocket","text":"You can list to events externally. For that, please read the events documentation of the Python client.","title":"Listen to events through websocket"},{"location":"file_trees/","text":"File trees descriptors To generate file path, Zou relies on JSON-based configuration files. Each file contains several sections, each one corresponds to a context (working file, output file, preview, etc.) Contexts Working and output are expected in all files. { \"working\": {...}, \"output\": {...} } Context details Then each section is composed of 4 fields: Mounting point Root folder Folder path template File path template \"working\": { \"mountpoint\": \"/working_files\", \"root\": \"productions\", \"folder_path\": {...}, \"file_name\": {...} } Folder path Folder path section requires three fields: Path for tasks related to assets. Path for tasks related to shots. Path for tasks related to sequences. Style (uppercase or lowercase) \"folder_path\": { \"shot\": \"<Project>/shots/<Sequence>/<Shot>/<TaskType>\", \"asset\": \"<Project>/assets/<AssetType>/<Asset>/<TaskType>\", \"sequence\": \"<Project>/sequences/<Sequence>>/<TaskType>\", \"style\": \"lowercase\" } Tags (words between <>) are replaced by the name of the object attached to the task. File name File name templates are written the same way than folder templates. \"file_name\": { \"shot\": \"<Project>_<Sequence>_<Shot>_<TaskType>\", \"asset\": \"<Project>_<AssetType>_<Asset>_<TaskType>\", \"sequence\": \"<Project>_<Sequence>_<TaskType>\", \"style\": \"lowercase\" }","title":"File trees descriptors"},{"location":"file_trees/#file-trees-descriptors","text":"To generate file path, Zou relies on JSON-based configuration files. Each file contains several sections, each one corresponds to a context (working file, output file, preview, etc.)","title":"File trees descriptors"},{"location":"file_trees/#contexts","text":"Working and output are expected in all files. { \"working\": {...}, \"output\": {...} }","title":"Contexts"},{"location":"file_trees/#context-details","text":"Then each section is composed of 4 fields: Mounting point Root folder Folder path template File path template \"working\": { \"mountpoint\": \"/working_files\", \"root\": \"productions\", \"folder_path\": {...}, \"file_name\": {...} }","title":"Context details"},{"location":"file_trees/#folder-path","text":"Folder path section requires three fields: Path for tasks related to assets. Path for tasks related to shots. Path for tasks related to sequences. Style (uppercase or lowercase) \"folder_path\": { \"shot\": \"<Project>/shots/<Sequence>/<Shot>/<TaskType>\", \"asset\": \"<Project>/assets/<AssetType>/<Asset>/<TaskType>\", \"sequence\": \"<Project>/sequences/<Sequence>>/<TaskType>\", \"style\": \"lowercase\" } Tags (words between <>) are replaced by the name of the object attached to the task.","title":"Folder path"},{"location":"file_trees/#file-name","text":"File name templates are written the same way than folder templates. \"file_name\": { \"shot\": \"<Project>_<Sequence>_<Shot>_<TaskType>\", \"asset\": \"<Project>_<AssetType>_<Asset>_<TaskType>\", \"sequence\": \"<Project>_<Sequence>_<TaskType>\", \"style\": \"lowercase\" }","title":"File name"},{"location":"indexer/","text":"Data indexation To allow full-text search, Kitsu relies on an Indexing engine. It uses the Meilisearch technology. The indexer is optional. Kitsu can run without it. Setup the indexer First, retrieve the Meilisearch package: # Add Meilisearch package echo \"deb [trusted=yes] https://apt.fury.io/meilisearch/ /\" | sudo tee /etc/apt/sources.list.d/fury.list # Update APT and install Meilisearch sudo apt update && sudo apt install meilisearch Define a master key then create the service file for Meilisearch: Path: /etc/systemd/system/meilisearch.service [Unit] Description=Meilisearch search engine After=network.target [Service] User=meilisearch Group=meilisearch ExecStart=/usr/bin/meilisearch --master-key=\"masterkey\" [Install] WantedBy=multi-user.target Finally, start the Meilisearch indexer: sudo service meilisearch start Configuring the connection to the indexer To connect to the indexer Kitsu relies on three environment variables. The first one is the master key you set when you started Meilisearch. INDEXER_KEY=\"masterkey\" The two other variables are the indexer API location (host and port): INDEXER_HOST=\"localhost\" INDEXER_PORT=\"7700\" Once set, Kitsu will be able to connect to the indexer and will enable full-text search. Refreshing indexes If for any reason, the indexer was not running during changes in the Kitsu database, you can reset it at any time. Simply use this command (assuming all environment variables are correctly set). . /etc/zou/zou.env zou reset-search-index","title":"Data indexation"},{"location":"indexer/#data-indexation","text":"To allow full-text search, Kitsu relies on an Indexing engine. It uses the Meilisearch technology. The indexer is optional. Kitsu can run without it.","title":"Data indexation"},{"location":"indexer/#setup-the-indexer","text":"First, retrieve the Meilisearch package: # Add Meilisearch package echo \"deb [trusted=yes] https://apt.fury.io/meilisearch/ /\" | sudo tee /etc/apt/sources.list.d/fury.list # Update APT and install Meilisearch sudo apt update && sudo apt install meilisearch Define a master key then create the service file for Meilisearch: Path: /etc/systemd/system/meilisearch.service [Unit] Description=Meilisearch search engine After=network.target [Service] User=meilisearch Group=meilisearch ExecStart=/usr/bin/meilisearch --master-key=\"masterkey\" [Install] WantedBy=multi-user.target Finally, start the Meilisearch indexer: sudo service meilisearch start","title":"Setup the indexer"},{"location":"indexer/#configuring-the-connection-to-the-indexer","text":"To connect to the indexer Kitsu relies on three environment variables. The first one is the master key you set when you started Meilisearch. INDEXER_KEY=\"masterkey\" The two other variables are the indexer API location (host and port): INDEXER_HOST=\"localhost\" INDEXER_PORT=\"7700\" Once set, Kitsu will be able to connect to the indexer and will enable full-text search.","title":"Configuring the connection to the indexer"},{"location":"indexer/#refreshing-indexes","text":"If for any reason, the indexer was not running during changes in the Kitsu database, you can reset it at any time. Simply use this command (assuming all environment variables are correctly set). . /etc/zou/zou.env zou reset-search-index","title":"Refreshing indexes"},{"location":"jobs/","text":"Job Queue To run jobs asynchronously in a job queue, an additional service is required. What will be run in the job queue Playlists build Event handlers loaded in Zou Enabling job queue Set ENABLE_JOB_QUEUE environment variable to True in the variables file (/etc/zou/zou.env). S3 Storage If your variables file (/etc/zou/zou.env) uses a S3 backend. FS_BACKEND : Set this variable with \"s3\" FS_BUCKET_PREFIX : A prefix for your bucket names, it's mandatory to set it to properly use S3. FS_S3_REGION : Example: eu-west-3 FS_S3_ENDPOINT : The url of your region. Example: https://s3.eu-west-3.amazonaws.com FS_S3_ACCESS_KEY : Your user access key. FS_S3_SECRET_KEY : Your user secret key. If not yet installed, install the following package in your virtual environment: sudo /opt/zou/zouenv/bin/python -m pip install boto3 Setting up RQ, the job manager Create a systemd file: Path: /etc/systemd/system/zou-jobs.service [Unit] Description=RQ Job queue to run asynchronous job from Zou After=network.target [Service] User=zou Group=www-data WorkingDirectory=/opt/zou EnvironmentFile=/etc/zou/zou.env Environment=\"PATH=/opt/zou/zouenv/bin:/usr/bin\" ExecStart=/opt/zou/zouenv/bin/rq worker -c zou.job_settings [Install] WantedBy=multi-user.target Start the service: sudo systemctl enable zou-jobs sudo systemctl start zou-jobs","title":"Job Queue"},{"location":"jobs/#job-queue","text":"To run jobs asynchronously in a job queue, an additional service is required.","title":"Job Queue"},{"location":"jobs/#what-will-be-run-in-the-job-queue","text":"Playlists build Event handlers loaded in Zou","title":"What will be run in the job queue"},{"location":"jobs/#enabling-job-queue","text":"Set ENABLE_JOB_QUEUE environment variable to True in the variables file (/etc/zou/zou.env).","title":"Enabling job queue"},{"location":"jobs/#s3-storage","text":"If your variables file (/etc/zou/zou.env) uses a S3 backend. FS_BACKEND : Set this variable with \"s3\" FS_BUCKET_PREFIX : A prefix for your bucket names, it's mandatory to set it to properly use S3. FS_S3_REGION : Example: eu-west-3 FS_S3_ENDPOINT : The url of your region. Example: https://s3.eu-west-3.amazonaws.com FS_S3_ACCESS_KEY : Your user access key. FS_S3_SECRET_KEY : Your user secret key. If not yet installed, install the following package in your virtual environment: sudo /opt/zou/zouenv/bin/python -m pip install boto3","title":"S3 Storage"},{"location":"jobs/#setting-up-rq-the-job-manager","text":"Create a systemd file: Path: /etc/systemd/system/zou-jobs.service [Unit] Description=RQ Job queue to run asynchronous job from Zou After=network.target [Service] User=zou Group=www-data WorkingDirectory=/opt/zou EnvironmentFile=/etc/zou/zou.env Environment=\"PATH=/opt/zou/zouenv/bin:/usr/bin\" ExecStart=/opt/zou/zouenv/bin/rq worker -c zou.job_settings [Install] WantedBy=multi-user.target Start the service: sudo systemctl enable zou-jobs sudo systemctl start zou-jobs","title":"Setting up RQ, the job manager"},{"location":"ldap/","text":"LDAP Authentication can be managed through a LDAP (or Active Directory) server. It allows you to start using Kitsu directly with the accounts listed in your LDAP. Activate LDAP To activate LDAP, you must set the AUTH_STRATEGY environment variable (in /etc/zou/zou.env) with the following value: AUTH_STRATEGY=auth_remote_ldap NB: If you are using Active directory you must set the IS_LDAP flag to true. Required environment variables Once this authentication scheme selected, you must set the following variables: LDAP_HOST (default: \"127.0.0.1\"): the IP address of your LDAP server. LDAP_PORT (default: \"389\"): the listening port of your LDAP server. LDAP_BASE_DN (default: \"CN=Users,DC=studio,DC=local\"): the base domain of your LDAP configuration. LDAP_DOMAIN (default: \"studio.local\"): the domain used for your LDAP authentication. LDAP_FALLBACK (default: \"False\"): Set to True if you want to allow admins to fallback on default auth strategy when the LDAP server is down. LDAP_IS_AD (default: \"False\"): Set to True if you use LDAP with active directory. Example: LDAP_HOST=192.168.1.10 LDAP_PORT=389 LDAP_BASE_DN=CN=Users,DC=mystudio,DC=local LDAP_DOMAIN=mystudio.com LDAP_FALLBACK=True User list synchronization You will have to synchronize the user list with users from the LDAP. A good option is to handle it via a Python script. But, to makes things simpler, we added a command in zou binary to do it for you. It's a one way sync. We consider that Zou should not alter your LDAP user list. This command requires additional environment variables: LDAP_USER : Username of a LDAP user that can lists all LDAP users. LDAP_PASSWORD : Password of a LDAP user that can lists all LDAP users. LDAP_EMAIL_DOMAIN : User email will be built with username + @ + email domain. LDAP_EXCLUDED_ACCOUNTS : Set the list of people that should not be created in Kitsu API (Zou). Example: LC_ALL=C.UTF-8 \\ LANG=C.UTF-8 \\ DB_HOST=yourdbhost \\ LDAP_HOST=192.168.1.10 LDAP_PORT=389 \\ LDAP_BASE_DN=CN=Users,DC=mystudio,DC=local \\ LDAP_DOMAIN=mystudio.com \\ LDAP_USER=myusername \\ LDAP_PASSWORD=myuserpassword \\ LDAP_EMAIL_DOMAIN=mystudio.com \\ LDAP_EXCLUDED_ACCOUNTS=Administrator,TestAccount \\ zou sync-with-ldap-server Note about Kitsu When LDAP is activated, it is not possible anymore to change following user information through the Kitsu web UI: email first name last name avatar","title":"LDAP"},{"location":"ldap/#ldap","text":"Authentication can be managed through a LDAP (or Active Directory) server. It allows you to start using Kitsu directly with the accounts listed in your LDAP.","title":"LDAP"},{"location":"ldap/#activate-ldap","text":"To activate LDAP, you must set the AUTH_STRATEGY environment variable (in /etc/zou/zou.env) with the following value: AUTH_STRATEGY=auth_remote_ldap NB: If you are using Active directory you must set the IS_LDAP flag to true.","title":"Activate LDAP"},{"location":"ldap/#required-environment-variables","text":"Once this authentication scheme selected, you must set the following variables: LDAP_HOST (default: \"127.0.0.1\"): the IP address of your LDAP server. LDAP_PORT (default: \"389\"): the listening port of your LDAP server. LDAP_BASE_DN (default: \"CN=Users,DC=studio,DC=local\"): the base domain of your LDAP configuration. LDAP_DOMAIN (default: \"studio.local\"): the domain used for your LDAP authentication. LDAP_FALLBACK (default: \"False\"): Set to True if you want to allow admins to fallback on default auth strategy when the LDAP server is down. LDAP_IS_AD (default: \"False\"): Set to True if you use LDAP with active directory. Example: LDAP_HOST=192.168.1.10 LDAP_PORT=389 LDAP_BASE_DN=CN=Users,DC=mystudio,DC=local LDAP_DOMAIN=mystudio.com LDAP_FALLBACK=True","title":"Required environment variables"},{"location":"ldap/#user-list-synchronization","text":"You will have to synchronize the user list with users from the LDAP. A good option is to handle it via a Python script. But, to makes things simpler, we added a command in zou binary to do it for you. It's a one way sync. We consider that Zou should not alter your LDAP user list. This command requires additional environment variables: LDAP_USER : Username of a LDAP user that can lists all LDAP users. LDAP_PASSWORD : Password of a LDAP user that can lists all LDAP users. LDAP_EMAIL_DOMAIN : User email will be built with username + @ + email domain. LDAP_EXCLUDED_ACCOUNTS : Set the list of people that should not be created in Kitsu API (Zou). Example: LC_ALL=C.UTF-8 \\ LANG=C.UTF-8 \\ DB_HOST=yourdbhost \\ LDAP_HOST=192.168.1.10 LDAP_PORT=389 \\ LDAP_BASE_DN=CN=Users,DC=mystudio,DC=local \\ LDAP_DOMAIN=mystudio.com \\ LDAP_USER=myusername \\ LDAP_PASSWORD=myuserpassword \\ LDAP_EMAIL_DOMAIN=mystudio.com \\ LDAP_EXCLUDED_ACCOUNTS=Administrator,TestAccount \\ zou sync-with-ldap-server","title":"User list synchronization"},{"location":"ldap/#note-about-kitsu","text":"When LDAP is activated, it is not possible anymore to change following user information through the Kitsu web UI: email first name last name avatar","title":"Note about Kitsu"},{"location":"log_rotation/","text":"Log rotation Log produced by the API grow quickly and lead to big log files. You will need quickly to configure logrotate to create a new log file every day. Store PID of zou processes To create a folder on boot to store pid files add a RuntimeDirectory add a line before ExecStart in the unit file ( /etc/systemd/system/zou.service ): RuntimeDirectory=zou Add this to the ExecStart line to create the pid file for zou -p /run/zou/zou.pid For example: ExecStart=/opt/zou/zouenv/bin/gunicorn -p /run/zou/zou.pid -c /etc/zou/gunicorn.py -b 127.0.0.1:5000 zou.app:app Edit the zou-events unit file to create the pid file for zou-events ( /etc/systemd/system/zou-events.service ): -p /run/zou/zou-events.pid PIDs are now stored in mentioned files. Configure logrotate We can now proceed to the Logrotate configuration. Logrotate is a Unix tool that will handle the log rotation for you. It just requires a configuration file to work properly. Add this logrotate configuration ( /etc/logrotate.d/zou ): /opt/zou/logs/gunicorn_access.log { daily missingok rotate 14 notifempty nocompress size 100M create 644 zou zou postrotate kill -USR1 `cat /run/zou/zou.pid` endscript } /opt/zou/logs/gunicorn_error.log { daily missingok rotate 14 nocompress size 100M notifempty create 644 zou zou postrotate kill -USR1 `cat /run/zou/zou.pid` endscript } /opt/zou/logs/gunicorn_events_access.log { daily missingok rotate 14 nocompress size 100M notifempty create 644 zou zou postrotate kill -USR1 `cat /run/zou/zou-events.pid` endscript } /opt/zou/logs/gunicorn_events_error.log { daily missingok rotate 14 nocompress size 100M notifempty create 644 zou zou postrotate kill -USR1 `cat /run/zou/zou-events.pid` endscript } It will create a new log file for each day, and keep only the last 14 files. You can test the log rotation is set up correctly by running logrotate /etc/logrotate.d/zou --debug You're done with log rotation!","title":"Log rotation"},{"location":"log_rotation/#log-rotation","text":"Log produced by the API grow quickly and lead to big log files. You will need quickly to configure logrotate to create a new log file every day.","title":"Log rotation"},{"location":"log_rotation/#store-pid-of-zou-processes","text":"To create a folder on boot to store pid files add a RuntimeDirectory add a line before ExecStart in the unit file ( /etc/systemd/system/zou.service ): RuntimeDirectory=zou Add this to the ExecStart line to create the pid file for zou -p /run/zou/zou.pid For example: ExecStart=/opt/zou/zouenv/bin/gunicorn -p /run/zou/zou.pid -c /etc/zou/gunicorn.py -b 127.0.0.1:5000 zou.app:app Edit the zou-events unit file to create the pid file for zou-events ( /etc/systemd/system/zou-events.service ): -p /run/zou/zou-events.pid PIDs are now stored in mentioned files.","title":"Store PID of zou processes"},{"location":"log_rotation/#configure-logrotate","text":"We can now proceed to the Logrotate configuration. Logrotate is a Unix tool that will handle the log rotation for you. It just requires a configuration file to work properly. Add this logrotate configuration ( /etc/logrotate.d/zou ): /opt/zou/logs/gunicorn_access.log { daily missingok rotate 14 notifempty nocompress size 100M create 644 zou zou postrotate kill -USR1 `cat /run/zou/zou.pid` endscript } /opt/zou/logs/gunicorn_error.log { daily missingok rotate 14 nocompress size 100M notifempty create 644 zou zou postrotate kill -USR1 `cat /run/zou/zou.pid` endscript } /opt/zou/logs/gunicorn_events_access.log { daily missingok rotate 14 nocompress size 100M notifempty create 644 zou zou postrotate kill -USR1 `cat /run/zou/zou-events.pid` endscript } /opt/zou/logs/gunicorn_events_error.log { daily missingok rotate 14 nocompress size 100M notifempty create 644 zou zou postrotate kill -USR1 `cat /run/zou/zou-events.pid` endscript } It will create a new log file for each day, and keep only the last 14 files. You can test the log rotation is set up correctly by running logrotate /etc/logrotate.d/zou --debug You're done with log rotation!","title":"Configure logrotate"},{"location":"plugin/","text":"Plugins The Kitsu API (Zou) plugin system allows you to create modular extensions that integrate directly into the API. Each plugin includes a manifest.toml file with metadata and can contain database migrations, Flask blueprints, and more. Plugin structure A typical plugin created with create_plugin_skeleton looks like this: my_plugin/ \u251c\u2500\u2500 manifest.toml \u251c\u2500\u2500 migrations/ \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 versions/ \u251c\u2500\u2500 my_plugin/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 views.py manifest.toml A manifest file is required to describe how to deploy your plugin and inform other users about how it can be used. It contains the plugin metadata: id = \"my_plugin\" name = \"My Plugin\" version = \"0.1.0\" description = \"My plugin description.\" maintainer = \"Author <author@example.com>\" website = \"mywebsite.com\" license = \"GPL-3.0-only\" Best practices Use unique plugin IDs. Follow semantic versioning ( x.y.z ). Include at least one route or feature inside your plugin module. Write migrations if your plugin defines database models. For license use SPDX identifier (see here ). Quickstart Follow this simple workflow to start with writing your own plugin. Create plugin: zou create-plugin-skeleton --path ./plugins --id my_plugin Implement logic in the views.py file. Add DB models and generate migrations: zou migrate-plugin-db --path ./plugins/my_plugin Package it: zou create-plugin-package --path ./plugins/my_plugin --output-path ./dist Install it: zou install-plugin --path ./dist/my_plugin.zip List installed plugins: zou list-plugins Uninstall if needed: zou uninstall-plugin --id my_plugin CLI Commands install_plugin Install a plugin from a local folder or .zip package. zou install-plugin --path /path/to/plugin Options: --path : Path to the plugin folder or .zip archive (required). --force : Overwrite if already installed (default: False ). Note: You need to restart the Zou server after installing a plugin. uninstall_plugin Uninstall a previously installed plugin. zou uninstall-plugin --id my_plugin Options: --id : Plugin ID to uninstall (required). Note: This removes plugin files and unregisters its migrations. create_plugin_skeleton Generate the basic structure of a plugin. It will allow to start quickly your plugin development. zou create-plugin-skeleton --path ./plugins --id my_plugin Options: --path : Directory where the plugin will be created (required). --id : Unique plugin ID (required). --name : Human-readable plugin name (default: \"MyPlugin\" ). --description : Short description (default: \"My plugin description.\" ). --version : Semantic version string (default: \"0.1.0\" ). --maintainer : Contact info (default: \"Author <author@author.com>\" ). --website : Plugin/project website (default: \"mywebsite.com\" ). --license : License (default: \"GPL-3.0-only\" ). --force : Overwrite if directory exists (default: False ). This command generates: manifest.toml with plugin metadata Initial folder structure for code, migrations, etc. create_plugin_package Package a plugin folder into a zip file, ready for installation. zou create-plugin-package --path ./plugins/my_plugin --output-path ./dist Options: --path : Plugin source folder (required). --output-path : Destination folder for the .zip (required). --force : Overwrite existing archive if present (default: False ). list_plugins List all currently installed plugins. zou list-plugins Options: --format : table or json (default: table ). --verbose : Show more metadata. --filter-field : Filter by a specific field ( plugin_id , name , maintainer , license ). --filter-value : Value to search in the selected field. migrate_plugin_db Run database migrations for a plugin. zou migrate-plugin-db --path ./plugins/my_plugin Options: --path : Path to the plugin folder (required). --message : Optional migration message (default: \"\" ). This generates and applies Alembic migration scripts for the plugin\u2019s database schema.","title":"Plugins"},{"location":"plugin/#plugins","text":"The Kitsu API (Zou) plugin system allows you to create modular extensions that integrate directly into the API. Each plugin includes a manifest.toml file with metadata and can contain database migrations, Flask blueprints, and more.","title":"Plugins"},{"location":"plugin/#plugin-structure","text":"A typical plugin created with create_plugin_skeleton looks like this: my_plugin/ \u251c\u2500\u2500 manifest.toml \u251c\u2500\u2500 migrations/ \u2502 \u251c\u2500\u2500 env.py \u2502 \u251c\u2500\u2500 versions/ \u251c\u2500\u2500 my_plugin/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 views.py","title":"Plugin structure"},{"location":"plugin/#manifesttoml","text":"A manifest file is required to describe how to deploy your plugin and inform other users about how it can be used. It contains the plugin metadata: id = \"my_plugin\" name = \"My Plugin\" version = \"0.1.0\" description = \"My plugin description.\" maintainer = \"Author <author@example.com>\" website = \"mywebsite.com\" license = \"GPL-3.0-only\"","title":"manifest.toml"},{"location":"plugin/#best-practices","text":"Use unique plugin IDs. Follow semantic versioning ( x.y.z ). Include at least one route or feature inside your plugin module. Write migrations if your plugin defines database models. For license use SPDX identifier (see here ).","title":"Best practices"},{"location":"plugin/#quickstart","text":"Follow this simple workflow to start with writing your own plugin. Create plugin: zou create-plugin-skeleton --path ./plugins --id my_plugin Implement logic in the views.py file. Add DB models and generate migrations: zou migrate-plugin-db --path ./plugins/my_plugin Package it: zou create-plugin-package --path ./plugins/my_plugin --output-path ./dist Install it: zou install-plugin --path ./dist/my_plugin.zip List installed plugins: zou list-plugins Uninstall if needed: zou uninstall-plugin --id my_plugin","title":"Quickstart"},{"location":"plugin/#cli-commands","text":"","title":"CLI Commands"},{"location":"plugin/#install_plugin","text":"Install a plugin from a local folder or .zip package. zou install-plugin --path /path/to/plugin Options: --path : Path to the plugin folder or .zip archive (required). --force : Overwrite if already installed (default: False ). Note: You need to restart the Zou server after installing a plugin.","title":"install_plugin"},{"location":"plugin/#uninstall_plugin","text":"Uninstall a previously installed plugin. zou uninstall-plugin --id my_plugin Options: --id : Plugin ID to uninstall (required). Note: This removes plugin files and unregisters its migrations.","title":"uninstall_plugin"},{"location":"plugin/#create_plugin_skeleton","text":"Generate the basic structure of a plugin. It will allow to start quickly your plugin development. zou create-plugin-skeleton --path ./plugins --id my_plugin Options: --path : Directory where the plugin will be created (required). --id : Unique plugin ID (required). --name : Human-readable plugin name (default: \"MyPlugin\" ). --description : Short description (default: \"My plugin description.\" ). --version : Semantic version string (default: \"0.1.0\" ). --maintainer : Contact info (default: \"Author <author@author.com>\" ). --website : Plugin/project website (default: \"mywebsite.com\" ). --license : License (default: \"GPL-3.0-only\" ). --force : Overwrite if directory exists (default: False ). This command generates: manifest.toml with plugin metadata Initial folder structure for code, migrations, etc.","title":"create_plugin_skeleton"},{"location":"plugin/#create_plugin_package","text":"Package a plugin folder into a zip file, ready for installation. zou create-plugin-package --path ./plugins/my_plugin --output-path ./dist Options: --path : Plugin source folder (required). --output-path : Destination folder for the .zip (required). --force : Overwrite existing archive if present (default: False ).","title":"create_plugin_package"},{"location":"plugin/#list_plugins","text":"List all currently installed plugins. zou list-plugins Options: --format : table or json (default: table ). --verbose : Show more metadata. --filter-field : Filter by a specific field ( plugin_id , name , maintainer , license ). --filter-value : Value to search in the selected field.","title":"list_plugins"},{"location":"plugin/#migrate_plugin_db","text":"Run database migrations for a plugin. zou migrate-plugin-db --path ./plugins/my_plugin Options: --path : Path to the plugin folder (required). --message : Optional migration message (default: \"\" ). This generates and applies Alembic migration scripts for the plugin\u2019s database schema.","title":"migrate_plugin_db"},{"location":"sync/","text":"Data migration Raw mode To migrate a Kitsu from an instance to another, you can simply dump the database and restore it to the new instance. Once done, you have to move all the files stored in the preview folder to the preview folder of the new instance. With Zou CLI We assume here that you are evolving in the zou virtualenv environment and that all your environment variables are loaded. Prepare the new instance (reset data) Clear original database and rebuild tables: . /etc/zou/zou.env zou clear-db zou reset-migrations zou upgrade-db Get data Retrieve base data: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full --source http://yourpreviouskitsu.url/api --no-projects Retrieve project data: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full --source http://yourpreviouskitsu.url/api --only-projects Retrieve a given project: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full --source http://yourpreviouskitsu.url/api --project AwesomeProject If some changes occured after the migration, you can run the command again and retrieve the difference. Beware that deletion won't be handled. Get files The previous steps were used to retrieve the data stored in the database. Retrieve all files: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full-files --source http://yourpreviouskitsu.url/api Retrieve files for a given project: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full-files --source http://yourpreviouskitsu.url/api If some changes occured after the migration, you can run the command again and retrieve the difference. Beware that deletion won't be handled.","title":"Data migration"},{"location":"sync/#data-migration","text":"","title":"Data migration"},{"location":"sync/#raw-mode","text":"To migrate a Kitsu from an instance to another, you can simply dump the database and restore it to the new instance. Once done, you have to move all the files stored in the preview folder to the preview folder of the new instance.","title":"Raw mode"},{"location":"sync/#with-zou-cli","text":"We assume here that you are evolving in the zou virtualenv environment and that all your environment variables are loaded.","title":"With Zou CLI"},{"location":"sync/#prepare-the-new-instance-reset-data","text":"Clear original database and rebuild tables: . /etc/zou/zou.env zou clear-db zou reset-migrations zou upgrade-db","title":"Prepare the new instance (reset data)"},{"location":"sync/#get-data","text":"Retrieve base data: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full --source http://yourpreviouskitsu.url/api --no-projects Retrieve project data: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full --source http://yourpreviouskitsu.url/api --only-projects Retrieve a given project: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full --source http://yourpreviouskitsu.url/api --project AwesomeProject If some changes occured after the migration, you can run the command again and retrieve the difference. Beware that deletion won't be handled.","title":"Get data"},{"location":"sync/#get-files","text":"The previous steps were used to retrieve the data stored in the database. Retrieve all files: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full-files --source http://yourpreviouskitsu.url/api Retrieve files for a given project: . /etc/zou/zou.env SYNC_LOGIN=\"admin@yourstudio.com\" \\ SYNC_PASSWORD=\"password\" \\ zou sync-full-files --source http://yourpreviouskitsu.url/api If some changes occured after the migration, you can run the command again and retrieve the difference. Beware that deletion won't be handled.","title":"Get files"},{"location":"troubleshooting/","text":"Troubleshooting To solve issues related to your installation, you can do several actions to get information about what is going wrong. Database status Prior to look for logs or any clue about your problem, make sure that the database is up and up to date: . /etc/zou/zou.env /opt/zou/zouenv/bin/zou upgrade-db Error logs Main error logs are stored in the /opt/zou/gunicorn_error.log file. Errors can be explicit. They can tell what is going wrong. Status route To know if all the required services are up, you can connect to the following route: http://kitsu.mystudio.com/api/status . You should see something like this: { \"name\": \"Zou\" \"database-up\": true, \"event-stream-up\": true, \"job-queue-up\": true, \"key-value-store-up\": true, \"version\": \"0.11.3\", } If one of the service is set to false, it means that it is down or that Zou cannot connect to it. Zou cannot run properly in that case. NB: Database refers to Posgres, Key Value Store refers to Redis, Event Stream refers to zou-events service, job queue refers to zou-jobs service. Changing password If, for any reasons, the user cannot access to his rest password email, you can change his password with the following command: . /etc/zou/zou.env /opt/zou/zouenv/bin/zou change-password email@studio.com --password newsecretpassword Installing on Ubuntu server or minimal desktop Zou install will require libjpeg-dev to be installed at the 3rd party software step: sudo apt-get install libjpeg-dev To enable zou to start on reboot sudo systemctl enable zou zou-events Job queue Error logs are not displayed in the zou error log files. So you have to check directly the service logs if you look for error messages related to asynchronous jobs (email sending, video normalization and playlist buird). To see the job queue logs, run the following command: journalctl -u zou-jobs.service Postgres connection slots If your Zou server complains by the lack of connection to Postgres available, you can increase the value of BD_POOL_SIZE (default 30) and DB_MAX_OVERFLOW (default 60). They are two environment variables that must be set in your systemd configuration alongside the others. If the problem persists, you can dig into pgpool software. Playlist build failing Unmatching resolutions If your previews have different resolutions, the build will fail. Make sure your playlists have movies with the same size. The build doesn't include pictures, only movies are included. Disk space Check logs and look for: OSError: [Errno 28] No space left on device Make sure it's coherent with what your system tells: df -h du -sh /opt/zou/previews/movies du -sh /opt/zou/previews/files du -sh /opt/zou/previews/pictures The error is explicit: your drive is full. You have multiple options: Add more space Use a s3 compatible service Delete unused files Delete data into Kitsu old projects, old shots or old preview revisions (or both). Create a cronjob that deletes tmp files older than 5 days: # clean kitsu tmp folder 17 2 * * * /usr/bin/find /opt/zou/tmp/ -mtime +5 -exec rm {} \\; Unable to successfully upgrade from a much earlier version If your current working version of Zou is much earlier than the latest version, upgrading directly to the latest may cause problems with the database. This is because occasionally important changes are made to the database during the upgrade process. The solution is to upgrade in smaller steps, making sure you don't miss any critical versions. Since it can be hard to know which version is critical, one option is to apply all updates one after the other. The following script can assist by making updating to a specific version and then incrementing to the next quite easy. Add your database password and edit for any other path differences. Run as <script name> <zou version> eg; ./zou_to_version.sh 0.14.12 . /etc/zou/zou.env sudo /opt/zou/zouenv/bin/python -m pip install 'zou=='$1 #this is the version number variable /opt/zou/zouenv/bin/zou upgrade-db sudo systemctl restart zou zou-events","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"To solve issues related to your installation, you can do several actions to get information about what is going wrong.","title":"Troubleshooting"},{"location":"troubleshooting/#database-status","text":"Prior to look for logs or any clue about your problem, make sure that the database is up and up to date: . /etc/zou/zou.env /opt/zou/zouenv/bin/zou upgrade-db","title":"Database status"},{"location":"troubleshooting/#error-logs","text":"Main error logs are stored in the /opt/zou/gunicorn_error.log file. Errors can be explicit. They can tell what is going wrong.","title":"Error logs"},{"location":"troubleshooting/#status-route","text":"To know if all the required services are up, you can connect to the following route: http://kitsu.mystudio.com/api/status . You should see something like this: { \"name\": \"Zou\" \"database-up\": true, \"event-stream-up\": true, \"job-queue-up\": true, \"key-value-store-up\": true, \"version\": \"0.11.3\", } If one of the service is set to false, it means that it is down or that Zou cannot connect to it. Zou cannot run properly in that case. NB: Database refers to Posgres, Key Value Store refers to Redis, Event Stream refers to zou-events service, job queue refers to zou-jobs service.","title":"Status route"},{"location":"troubleshooting/#changing-password","text":"If, for any reasons, the user cannot access to his rest password email, you can change his password with the following command: . /etc/zou/zou.env /opt/zou/zouenv/bin/zou change-password email@studio.com --password newsecretpassword","title":"Changing password"},{"location":"troubleshooting/#installing-on-ubuntu-server-or-minimal-desktop","text":"Zou install will require libjpeg-dev to be installed at the 3rd party software step: sudo apt-get install libjpeg-dev","title":"Installing on Ubuntu server or minimal desktop"},{"location":"troubleshooting/#to-enable-zou-to-start-on-reboot","text":"sudo systemctl enable zou zou-events","title":"To enable zou to start on reboot"},{"location":"troubleshooting/#job-queue","text":"Error logs are not displayed in the zou error log files. So you have to check directly the service logs if you look for error messages related to asynchronous jobs (email sending, video normalization and playlist buird). To see the job queue logs, run the following command: journalctl -u zou-jobs.service","title":"Job queue"},{"location":"troubleshooting/#postgres-connection-slots","text":"If your Zou server complains by the lack of connection to Postgres available, you can increase the value of BD_POOL_SIZE (default 30) and DB_MAX_OVERFLOW (default 60). They are two environment variables that must be set in your systemd configuration alongside the others. If the problem persists, you can dig into pgpool software.","title":"Postgres connection slots"},{"location":"troubleshooting/#playlist-build-failing","text":"","title":"Playlist build failing"},{"location":"troubleshooting/#unmatching-resolutions","text":"If your previews have different resolutions, the build will fail. Make sure your playlists have movies with the same size. The build doesn't include pictures, only movies are included.","title":"Unmatching resolutions"},{"location":"troubleshooting/#disk-space","text":"Check logs and look for: OSError: [Errno 28] No space left on device Make sure it's coherent with what your system tells: df -h du -sh /opt/zou/previews/movies du -sh /opt/zou/previews/files du -sh /opt/zou/previews/pictures The error is explicit: your drive is full. You have multiple options: Add more space Use a s3 compatible service Delete unused files Delete data into Kitsu old projects, old shots or old preview revisions (or both). Create a cronjob that deletes tmp files older than 5 days: # clean kitsu tmp folder 17 2 * * * /usr/bin/find /opt/zou/tmp/ -mtime +5 -exec rm {} \\;","title":"Disk space"},{"location":"troubleshooting/#unable-to-successfully-upgrade-from-a-much-earlier-version","text":"If your current working version of Zou is much earlier than the latest version, upgrading directly to the latest may cause problems with the database. This is because occasionally important changes are made to the database during the upgrade process. The solution is to upgrade in smaller steps, making sure you don't miss any critical versions. Since it can be hard to know which version is critical, one option is to apply all updates one after the other. The following script can assist by making updating to a specific version and then incrementing to the next quite easy. Add your database password and edit for any other path differences. Run as <script name> <zou version> eg; ./zou_to_version.sh 0.14.12 . /etc/zou/zou.env sudo /opt/zou/zouenv/bin/python -m pip install 'zou=='$1 #this is the version number variable /opt/zou/zouenv/bin/zou upgrade-db sudo systemctl restart zou zou-events","title":"Unable to successfully upgrade from a much earlier version"}]}